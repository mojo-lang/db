// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sql

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

var DataSetQuantifierNames = map[int32]string{
	0: "unspecified",
	1: "distinct",
	2: "all",
}

var DataSetQuantifierValues = map[string]DataSetQuantifier{
	"unspecified": DataSetQuantifier_DATA_SET_QUANTIFIER_UNSPECIFIED,
	"distinct":    DataSetQuantifier_DATA_SET_QUANTIFIER_DISTINCT,
	"all":         DataSetQuantifier_DATA_SET_QUANTIFIER_ALL,
}

func (x DataSetQuantifier) Format() string {
	v := int32(x)
	if s, ok := DataSetQuantifierNames[v]; ok {
		if v == 0 && "unspecified" == strings.ToLower(s) {
			return ""
		}
		return s
	}
	if v == 0 {
		return ""
	}
	return strconv.Itoa(int(v))
}

func (x DataSetQuantifier) ToString() string {
	return x.Format()
}

func (x *DataSetQuantifier) Parse(value string) error {
	if x != nil && len(value) > 0 {
		if s, ok := DataSetQuantifierValues[value]; ok {
			*x = s
		} else {
			v := core.CaseStyler("snake")(value)
			if s, ok = DataSetQuantifierValues[v]; ok {
				*x = s
			} else {
				return fmt.Errorf("invalid DataSetQuantifier: %s", value)
			}
		}
	}
	return nil
}

func ParseDataSetQuantifier(value string) (DataSetQuantifier, error) {
	var v DataSetQuantifier
	if err := (&v).Parse(value); err != nil {
		return v, err
	}
	return v, nil
}
