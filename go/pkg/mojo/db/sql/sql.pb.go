// Code generated by mojo. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: mojo/db/sql/sql.proto

package sql

import (
	lang "github.com/mojo-lang/lang/go/pkg/mojo/lang"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BinaryExpr_Operator int32

const (
	BinaryExpr_OPERATOR_UNSPECIFIED BinaryExpr_Operator = 0
	BinaryExpr_OPERATOR_PLUS        BinaryExpr_Operator = 1
	BinaryExpr_OPERATOR_MINUS       BinaryExpr_Operator = 2
	BinaryExpr_OPERATOR_MUL         BinaryExpr_Operator = 3
	BinaryExpr_OPERATOR_DIV         BinaryExpr_Operator = 4
	BinaryExpr_OPERATOR_MOD         BinaryExpr_Operator = 5
	BinaryExpr_OPERATOR_LT          BinaryExpr_Operator = 10
	BinaryExpr_OPERATOR_GT          BinaryExpr_Operator = 11
	BinaryExpr_OPERATOR_LTE         BinaryExpr_Operator = 12
	BinaryExpr_OPERATOR_GTE         BinaryExpr_Operator = 13
	BinaryExpr_OPERATOR_EQUAL       BinaryExpr_Operator = 14
	BinaryExpr_OPERATOR_NOT_EQUAL   BinaryExpr_Operator = 15
	BinaryExpr_OPERATOR_ASSIGN      BinaryExpr_Operator = 18
	BinaryExpr_OPERATOR_AND         BinaryExpr_Operator = 20
	BinaryExpr_OPERATOR_OR          BinaryExpr_Operator = 21
	BinaryExpr_OPERATOR_BIT_AND     BinaryExpr_Operator = 25
	BinaryExpr_OPERATOR_BIT_OR      BinaryExpr_Operator = 26
	BinaryExpr_OPERATOR_BIT_XOR     BinaryExpr_Operator = 27
	BinaryExpr_OPERATOR_IS          BinaryExpr_Operator = 30
	BinaryExpr_OPERATOR_IS_NOT      BinaryExpr_Operator = 31
	BinaryExpr_OPERATOR_IN          BinaryExpr_Operator = 40
	BinaryExpr_OPERATOR_LIKE        BinaryExpr_Operator = 41
	BinaryExpr_OPERATOR_MATCH       BinaryExpr_Operator = 42
	BinaryExpr_OPERATOR_REGEXP      BinaryExpr_Operator = 43
	BinaryExpr_OPERATOR_GLOB        BinaryExpr_Operator = 50
)

// Enum value maps for BinaryExpr_Operator.
var (
	BinaryExpr_Operator_name = map[int32]string{
		0:  "OPERATOR_UNSPECIFIED",
		1:  "OPERATOR_PLUS",
		2:  "OPERATOR_MINUS",
		3:  "OPERATOR_MUL",
		4:  "OPERATOR_DIV",
		5:  "OPERATOR_MOD",
		10: "OPERATOR_LT",
		11: "OPERATOR_GT",
		12: "OPERATOR_LTE",
		13: "OPERATOR_GTE",
		14: "OPERATOR_EQUAL",
		15: "OPERATOR_NOT_EQUAL",
		18: "OPERATOR_ASSIGN",
		20: "OPERATOR_AND",
		21: "OPERATOR_OR",
		25: "OPERATOR_BIT_AND",
		26: "OPERATOR_BIT_OR",
		27: "OPERATOR_BIT_XOR",
		30: "OPERATOR_IS",
		31: "OPERATOR_IS_NOT",
		40: "OPERATOR_IN",
		41: "OPERATOR_LIKE",
		42: "OPERATOR_MATCH",
		43: "OPERATOR_REGEXP",
		50: "OPERATOR_GLOB",
	}
	BinaryExpr_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_PLUS":        1,
		"OPERATOR_MINUS":       2,
		"OPERATOR_MUL":         3,
		"OPERATOR_DIV":         4,
		"OPERATOR_MOD":         5,
		"OPERATOR_LT":          10,
		"OPERATOR_GT":          11,
		"OPERATOR_LTE":         12,
		"OPERATOR_GTE":         13,
		"OPERATOR_EQUAL":       14,
		"OPERATOR_NOT_EQUAL":   15,
		"OPERATOR_ASSIGN":      18,
		"OPERATOR_AND":         20,
		"OPERATOR_OR":          21,
		"OPERATOR_BIT_AND":     25,
		"OPERATOR_BIT_OR":      26,
		"OPERATOR_BIT_XOR":     27,
		"OPERATOR_IS":          30,
		"OPERATOR_IS_NOT":      31,
		"OPERATOR_IN":          40,
		"OPERATOR_LIKE":        41,
		"OPERATOR_MATCH":       42,
		"OPERATOR_REGEXP":      43,
		"OPERATOR_GLOB":        50,
	}
)

func (x BinaryExpr_Operator) Enum() *BinaryExpr_Operator {
	p := new(BinaryExpr_Operator)
	*p = x
	return p
}

func (x BinaryExpr_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryExpr_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_db_sql_sql_proto_enumTypes[0].Descriptor()
}

func (BinaryExpr_Operator) Type() protoreflect.EnumType {
	return &file_mojo_db_sql_sql_proto_enumTypes[0]
}

func (x BinaryExpr_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryExpr_Operator.Descriptor instead.
func (BinaryExpr_Operator) EnumDescriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{0, 0}
}

type CompoundSelect_Operator int32

const (
	CompoundSelect_OPERATOR_UNSPECIFIED CompoundSelect_Operator = 0
	CompoundSelect_OPERATOR_UNION       CompoundSelect_Operator = 1
	CompoundSelect_OPERATOR_INTERSECT   CompoundSelect_Operator = 2
	CompoundSelect_OPERATOR_EXCEPT      CompoundSelect_Operator = 3
)

// Enum value maps for CompoundSelect_Operator.
var (
	CompoundSelect_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_UNION",
		2: "OPERATOR_INTERSECT",
		3: "OPERATOR_EXCEPT",
	}
	CompoundSelect_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_UNION":       1,
		"OPERATOR_INTERSECT":   2,
		"OPERATOR_EXCEPT":      3,
	}
)

func (x CompoundSelect_Operator) Enum() *CompoundSelect_Operator {
	p := new(CompoundSelect_Operator)
	*p = x
	return p
}

func (x CompoundSelect_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompoundSelect_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_db_sql_sql_proto_enumTypes[1].Descriptor()
}

func (CompoundSelect_Operator) Type() protoreflect.EnumType {
	return &file_mojo_db_sql_sql_proto_enumTypes[1]
}

func (x CompoundSelect_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompoundSelect_Operator.Descriptor instead.
func (CompoundSelect_Operator) EnumDescriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{4, 0}
}

type JoinClause_Operator int32

const (
	JoinClause_OPERATOR_UNSPECIFIED JoinClause_Operator = 0
)

// Enum value maps for JoinClause_Operator.
var (
	JoinClause_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
	}
	JoinClause_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
	}
)

func (x JoinClause_Operator) Enum() *JoinClause_Operator {
	p := new(JoinClause_Operator)
	*p = x
	return p
}

func (x JoinClause_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinClause_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_db_sql_sql_proto_enumTypes[2].Descriptor()
}

func (JoinClause_Operator) Type() protoreflect.EnumType {
	return &file_mojo_db_sql_sql_proto_enumTypes[2]
}

func (x JoinClause_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinClause_Operator.Descriptor instead.
func (JoinClause_Operator) EnumDescriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{9, 0}
}

type PostfixUnaryExpr_Operator int32

const (
	PostfixUnaryExpr_OPERATOR_UNSPECIFIED PostfixUnaryExpr_Operator = 0
	PostfixUnaryExpr_OPERATOR_IS_NULL     PostfixUnaryExpr_Operator = 1
	PostfixUnaryExpr_OPERATOR_NOT_NULL    PostfixUnaryExpr_Operator = 2
	PostfixUnaryExpr_OPERATOR_EXTENDED    PostfixUnaryExpr_Operator = 99
)

// Enum value maps for PostfixUnaryExpr_Operator.
var (
	PostfixUnaryExpr_Operator_name = map[int32]string{
		0:  "OPERATOR_UNSPECIFIED",
		1:  "OPERATOR_IS_NULL",
		2:  "OPERATOR_NOT_NULL",
		99: "OPERATOR_EXTENDED",
	}
	PostfixUnaryExpr_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_IS_NULL":     1,
		"OPERATOR_NOT_NULL":    2,
		"OPERATOR_EXTENDED":    99,
	}
)

func (x PostfixUnaryExpr_Operator) Enum() *PostfixUnaryExpr_Operator {
	p := new(PostfixUnaryExpr_Operator)
	*p = x
	return p
}

func (x PostfixUnaryExpr_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostfixUnaryExpr_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_db_sql_sql_proto_enumTypes[3].Descriptor()
}

func (PostfixUnaryExpr_Operator) Type() protoreflect.EnumType {
	return &file_mojo_db_sql_sql_proto_enumTypes[3]
}

func (x PostfixUnaryExpr_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostfixUnaryExpr_Operator.Descriptor instead.
func (PostfixUnaryExpr_Operator) EnumDescriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{14, 0}
}

type PrefixUnaryExpr_Operator int32

const (
	PrefixUnaryExpr_OPERATOR_UNSPECIFIED PrefixUnaryExpr_Operator = 0
	PrefixUnaryExpr_OPERATOR_MINUS       PrefixUnaryExpr_Operator = 1
	PrefixUnaryExpr_OPERATOR_PLUS        PrefixUnaryExpr_Operator = 2
	PrefixUnaryExpr_OPERATOR_TILDE       PrefixUnaryExpr_Operator = 3
	PrefixUnaryExpr_OPERATOR_NOT         PrefixUnaryExpr_Operator = 4
	PrefixUnaryExpr_OPERATOR_BIT_NOT     PrefixUnaryExpr_Operator = 5
	PrefixUnaryExpr_OPERATOR_EXTENDED    PrefixUnaryExpr_Operator = 99
)

// Enum value maps for PrefixUnaryExpr_Operator.
var (
	PrefixUnaryExpr_Operator_name = map[int32]string{
		0:  "OPERATOR_UNSPECIFIED",
		1:  "OPERATOR_MINUS",
		2:  "OPERATOR_PLUS",
		3:  "OPERATOR_TILDE",
		4:  "OPERATOR_NOT",
		5:  "OPERATOR_BIT_NOT",
		99: "OPERATOR_EXTENDED",
	}
	PrefixUnaryExpr_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_MINUS":       1,
		"OPERATOR_PLUS":        2,
		"OPERATOR_TILDE":       3,
		"OPERATOR_NOT":         4,
		"OPERATOR_BIT_NOT":     5,
		"OPERATOR_EXTENDED":    99,
	}
)

func (x PrefixUnaryExpr_Operator) Enum() *PrefixUnaryExpr_Operator {
	p := new(PrefixUnaryExpr_Operator)
	*p = x
	return p
}

func (x PrefixUnaryExpr_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrefixUnaryExpr_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_db_sql_sql_proto_enumTypes[4].Descriptor()
}

func (PrefixUnaryExpr_Operator) Type() protoreflect.EnumType {
	return &file_mojo_db_sql_sql_proto_enumTypes[4]
}

func (x PrefixUnaryExpr_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrefixUnaryExpr_Operator.Descriptor instead.
func (PrefixUnaryExpr_Operator) EnumDescriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{15, 0}
}

type BinaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition      *lang.Position      `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition        *lang.Position      `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind               int32               `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit           bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Operator           BinaryExpr_Operator `protobuf:"varint,10,opt,name=operator,proto3,enum=mojo.db.sql.BinaryExpr_Operator" json:"operator,omitempty"`
	OperatorSymbol     string              `protobuf:"bytes,11,opt,name=operator_symbol,json=operatorSymbol,proto3" json:"operatorSymbol,omitempty"`
	OperatorPrecedence int32               `protobuf:"varint,12,opt,name=operator_precedence,json=operatorPrecedence,proto3" json:"operatorPrecedence,omitempty"`
	LeftArgument       *Expression         `protobuf:"bytes,15,opt,name=left_argument,json=leftArgument,proto3" json:"leftArgument,omitempty"`
	RightArgument      *Expression         `protobuf:"bytes,16,opt,name=right_argument,json=rightArgument,proto3" json:"rightArgument,omitempty"`
}

func (x *BinaryExpr) Reset() {
	*x = BinaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpr) ProtoMessage() {}

func (x *BinaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpr.ProtoReflect.Descriptor instead.
func (*BinaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{0}
}

func (x *BinaryExpr) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *BinaryExpr) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *BinaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *BinaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *BinaryExpr) GetOperator() BinaryExpr_Operator {
	if x != nil {
		return x.Operator
	}
	return BinaryExpr_OPERATOR_UNSPECIFIED
}

func (x *BinaryExpr) GetOperatorSymbol() string {
	if x != nil {
		return x.OperatorSymbol
	}
	return ""
}

func (x *BinaryExpr) GetOperatorPrecedence() int32 {
	if x != nil {
		return x.OperatorPrecedence
	}
	return 0
}

func (x *BinaryExpr) GetLeftArgument() *Expression {
	if x != nil {
		return x.LeftArgument
	}
	return nil
}

func (x *BinaryExpr) GetRightArgument() *Expression {
	if x != nil {
		return x.RightArgument
	}
	return nil
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Column:
	//	*Column_AllColumnVal
	//	*Column_DerivedColumnVal
	Column isColumn_Column `protobuf_oneof:"column" json:"column,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{1}
}

func (m *Column) GetColumn() isColumn_Column {
	if m != nil {
		return m.Column
	}
	return nil
}

func (x *Column) GetAllColumnVal() *AllColumn {
	if x, ok := x.GetColumn().(*Column_AllColumnVal); ok {
		return x.AllColumnVal
	}
	return nil
}

func (x *Column) GetDerivedColumnVal() *DerivedColumn {
	if x, ok := x.GetColumn().(*Column_DerivedColumnVal); ok {
		return x.DerivedColumnVal
	}
	return nil
}

type isColumn_Column interface {
	isColumn_Column()
}

type Column_AllColumnVal struct {
	AllColumnVal *AllColumn `protobuf:"bytes,1,opt,name=all_column_val,json=allColumnVal,proto3,oneof" json:"allColumnVal,omitempty"`
}

type Column_DerivedColumnVal struct {
	DerivedColumnVal *DerivedColumn `protobuf:"bytes,2,opt,name=derived_column_val,json=derivedColumnVal,proto3,oneof" json:"derivedColumnVal,omitempty"`
}

func (*Column_AllColumnVal) isColumn_Column() {}

func (*Column_DerivedColumnVal) isColumn_Column() {}

type AllColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"tableName,omitempty"`
}

func (x *AllColumn) Reset() {
	*x = AllColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllColumn) ProtoMessage() {}

func (x *AllColumn) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllColumn.ProtoReflect.Descriptor instead.
func (*AllColumn) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{2}
}

func (x *AllColumn) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type DerivedColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expression `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	As   string      `protobuf:"bytes,2,opt,name=as,proto3" json:"as,omitempty"`
}

func (x *DerivedColumn) Reset() {
	*x = DerivedColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivedColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivedColumn) ProtoMessage() {}

func (x *DerivedColumn) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivedColumn.ProtoReflect.Descriptor instead.
func (*DerivedColumn) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{3}
}

func (x *DerivedColumn) GetExpr() *Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *DerivedColumn) GetAs() string {
	if x != nil {
		return x.As
	}
	return ""
}

type CompoundSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	With          *WithClause    `protobuf:"bytes,10,opt,name=with,proto3" json:"with,omitempty"`
	// Types that are assignable to Select:
	//	*CompoundSelect_SelectClause
	//	*CompoundSelect_CompoundSelect
	Select   isCompoundSelect_Select `protobuf_oneof:"select" json:"select,omitempty"`
	Values   *ValuesClause           `protobuf:"bytes,13,opt,name=values,proto3" json:"values,omitempty"`
	From     *FromClause             `protobuf:"bytes,14,opt,name=from,proto3" json:"from,omitempty"`
	Where    *WhereClause            `protobuf:"bytes,15,opt,name=where,proto3" json:"where,omitempty"`
	GroupBy  *GroupByClause          `protobuf:"bytes,16,opt,name=group_by,json=groupBy,proto3" json:"groupBy,omitempty"`
	Having   *HavingClause           `protobuf:"bytes,17,opt,name=having,proto3" json:"having,omitempty"`
	OrderBy  *OrderByClause          `protobuf:"bytes,20,opt,name=order_by,json=orderBy,proto3" json:"orderBy,omitempty"`
	Limit    *LimitClause            `protobuf:"bytes,21,opt,name=limit,proto3" json:"limit,omitempty"`
	Operator CompoundSelect_Operator `protobuf:"varint,30,opt,name=operator,proto3,enum=mojo.db.sql.CompoundSelect_Operator" json:"operator,omitempty"`
	Left     *CompoundSelect         `protobuf:"bytes,31,opt,name=left,proto3" json:"left,omitempty"`
	Right    *CompoundSelect         `protobuf:"bytes,32,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *CompoundSelect) Reset() {
	*x = CompoundSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundSelect) ProtoMessage() {}

func (x *CompoundSelect) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundSelect.ProtoReflect.Descriptor instead.
func (*CompoundSelect) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{4}
}

func (x *CompoundSelect) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *CompoundSelect) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *CompoundSelect) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *CompoundSelect) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *CompoundSelect) GetWith() *WithClause {
	if x != nil {
		return x.With
	}
	return nil
}

func (m *CompoundSelect) GetSelect() isCompoundSelect_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (x *CompoundSelect) GetSelectClause() *SelectClause {
	if x, ok := x.GetSelect().(*CompoundSelect_SelectClause); ok {
		return x.SelectClause
	}
	return nil
}

func (x *CompoundSelect) GetCompoundSelect() *CompoundSelect {
	if x, ok := x.GetSelect().(*CompoundSelect_CompoundSelect); ok {
		return x.CompoundSelect
	}
	return nil
}

func (x *CompoundSelect) GetValues() *ValuesClause {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *CompoundSelect) GetFrom() *FromClause {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CompoundSelect) GetWhere() *WhereClause {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *CompoundSelect) GetGroupBy() *GroupByClause {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *CompoundSelect) GetHaving() *HavingClause {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *CompoundSelect) GetOrderBy() *OrderByClause {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *CompoundSelect) GetLimit() *LimitClause {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *CompoundSelect) GetOperator() CompoundSelect_Operator {
	if x != nil {
		return x.Operator
	}
	return CompoundSelect_OPERATOR_UNSPECIFIED
}

func (x *CompoundSelect) GetLeft() *CompoundSelect {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *CompoundSelect) GetRight() *CompoundSelect {
	if x != nil {
		return x.Right
	}
	return nil
}

type isCompoundSelect_Select interface {
	isCompoundSelect_Select()
}

type CompoundSelect_SelectClause struct {
	SelectClause *SelectClause `protobuf:"bytes,11,opt,name=select_clause,json=selectClause,proto3,oneof" json:"selectClause,omitempty"`
}

type CompoundSelect_CompoundSelect struct {
	CompoundSelect *CompoundSelect `protobuf:"bytes,12,opt,name=compound_select,json=compoundSelect,proto3,oneof" json:"compoundSelect,omitempty"`
}

func (*CompoundSelect_SelectClause) isCompoundSelect_Select() {}

func (*CompoundSelect_CompoundSelect) isCompoundSelect_Select() {}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//	*Expression_NullLiteralExpr
	//	*Expression_BoolLiteralExpr
	//	*Expression_IntegerLiteralExpr
	//	*Expression_FloatLiteralExpr
	//	*Expression_StringLiteralExpr
	//	*Expression_BlobLiteralExpr
	//	*Expression_IdentifierExpr
	//	*Expression_BindParameterExpr
	//	*Expression_ColumnRefExpr
	//	*Expression_PrefixUnaryExpr
	//	*Expression_PostfixUnaryExpr
	//	*Expression_BinaryExpr
	//	*Expression_BetweenExpr
	//	*Expression_InExpr
	//	*Expression_CaseExpr
	//	*Expression_FunctionCallExpr
	//	*Expression_SubqueryExpr
	Expression isExpression_Expression `protobuf_oneof:"expression" json:"expression,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{5}
}

func (m *Expression) GetExpression() isExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *Expression) GetNullLiteralExpr() *lang.NullLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_NullLiteralExpr); ok {
		return x.NullLiteralExpr
	}
	return nil
}

func (x *Expression) GetBoolLiteralExpr() *lang.BoolLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_BoolLiteralExpr); ok {
		return x.BoolLiteralExpr
	}
	return nil
}

func (x *Expression) GetIntegerLiteralExpr() *lang.IntegerLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_IntegerLiteralExpr); ok {
		return x.IntegerLiteralExpr
	}
	return nil
}

func (x *Expression) GetFloatLiteralExpr() *lang.FloatLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_FloatLiteralExpr); ok {
		return x.FloatLiteralExpr
	}
	return nil
}

func (x *Expression) GetStringLiteralExpr() *lang.StringLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_StringLiteralExpr); ok {
		return x.StringLiteralExpr
	}
	return nil
}

func (x *Expression) GetBlobLiteralExpr() *BlobLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_BlobLiteralExpr); ok {
		return x.BlobLiteralExpr
	}
	return nil
}

func (x *Expression) GetIdentifierExpr() *IdentifierExpr {
	if x, ok := x.GetExpression().(*Expression_IdentifierExpr); ok {
		return x.IdentifierExpr
	}
	return nil
}

func (x *Expression) GetBindParameterExpr() *BindParameterExpr {
	if x, ok := x.GetExpression().(*Expression_BindParameterExpr); ok {
		return x.BindParameterExpr
	}
	return nil
}

func (x *Expression) GetColumnRefExpr() *ColumnRefExpr {
	if x, ok := x.GetExpression().(*Expression_ColumnRefExpr); ok {
		return x.ColumnRefExpr
	}
	return nil
}

func (x *Expression) GetPrefixUnaryExpr() *PrefixUnaryExpr {
	if x, ok := x.GetExpression().(*Expression_PrefixUnaryExpr); ok {
		return x.PrefixUnaryExpr
	}
	return nil
}

func (x *Expression) GetPostfixUnaryExpr() *PostfixUnaryExpr {
	if x, ok := x.GetExpression().(*Expression_PostfixUnaryExpr); ok {
		return x.PostfixUnaryExpr
	}
	return nil
}

func (x *Expression) GetBinaryExpr() *BinaryExpr {
	if x, ok := x.GetExpression().(*Expression_BinaryExpr); ok {
		return x.BinaryExpr
	}
	return nil
}

func (x *Expression) GetBetweenExpr() *BetweenExpr {
	if x, ok := x.GetExpression().(*Expression_BetweenExpr); ok {
		return x.BetweenExpr
	}
	return nil
}

func (x *Expression) GetInExpr() *InExpr {
	if x, ok := x.GetExpression().(*Expression_InExpr); ok {
		return x.InExpr
	}
	return nil
}

func (x *Expression) GetCaseExpr() *CaseExpr {
	if x, ok := x.GetExpression().(*Expression_CaseExpr); ok {
		return x.CaseExpr
	}
	return nil
}

func (x *Expression) GetFunctionCallExpr() *FunctionCallExpr {
	if x, ok := x.GetExpression().(*Expression_FunctionCallExpr); ok {
		return x.FunctionCallExpr
	}
	return nil
}

func (x *Expression) GetSubqueryExpr() *SubqueryExpr {
	if x, ok := x.GetExpression().(*Expression_SubqueryExpr); ok {
		return x.SubqueryExpr
	}
	return nil
}

type isExpression_Expression interface {
	isExpression_Expression()
}

type Expression_NullLiteralExpr struct {
	NullLiteralExpr *lang.NullLiteralExpr `protobuf:"bytes,1,opt,name=null_literal_expr,json=nullLiteralExpr,proto3,oneof" json:"nullLiteralExpr,omitempty"`
}

type Expression_BoolLiteralExpr struct {
	BoolLiteralExpr *lang.BoolLiteralExpr `protobuf:"bytes,2,opt,name=bool_literal_expr,json=boolLiteralExpr,proto3,oneof" json:"boolLiteralExpr,omitempty"`
}

type Expression_IntegerLiteralExpr struct {
	IntegerLiteralExpr *lang.IntegerLiteralExpr `protobuf:"bytes,3,opt,name=integer_literal_expr,json=integerLiteralExpr,proto3,oneof" json:"integerLiteralExpr,omitempty"`
}

type Expression_FloatLiteralExpr struct {
	FloatLiteralExpr *lang.FloatLiteralExpr `protobuf:"bytes,4,opt,name=float_literal_expr,json=floatLiteralExpr,proto3,oneof" json:"floatLiteralExpr,omitempty"`
}

type Expression_StringLiteralExpr struct {
	StringLiteralExpr *lang.StringLiteralExpr `protobuf:"bytes,5,opt,name=string_literal_expr,json=stringLiteralExpr,proto3,oneof" json:"stringLiteralExpr,omitempty"`
}

type Expression_BlobLiteralExpr struct {
	BlobLiteralExpr *BlobLiteralExpr `protobuf:"bytes,6,opt,name=blob_literal_expr,json=blobLiteralExpr,proto3,oneof" json:"blobLiteralExpr,omitempty"`
}

type Expression_IdentifierExpr struct {
	IdentifierExpr *IdentifierExpr `protobuf:"bytes,7,opt,name=identifier_expr,json=identifierExpr,proto3,oneof" json:"identifierExpr,omitempty"`
}

type Expression_BindParameterExpr struct {
	BindParameterExpr *BindParameterExpr `protobuf:"bytes,10,opt,name=bind_parameter_expr,json=bindParameterExpr,proto3,oneof" json:"bindParameterExpr,omitempty"`
}

type Expression_ColumnRefExpr struct {
	ColumnRefExpr *ColumnRefExpr `protobuf:"bytes,11,opt,name=column_ref_expr,json=columnRefExpr,proto3,oneof" json:"columnRefExpr,omitempty"`
}

type Expression_PrefixUnaryExpr struct {
	PrefixUnaryExpr *PrefixUnaryExpr `protobuf:"bytes,15,opt,name=prefix_unary_expr,json=prefixUnaryExpr,proto3,oneof" json:"prefixUnaryExpr,omitempty"`
}

type Expression_PostfixUnaryExpr struct {
	PostfixUnaryExpr *PostfixUnaryExpr `protobuf:"bytes,16,opt,name=postfix_unary_expr,json=postfixUnaryExpr,proto3,oneof" json:"postfixUnaryExpr,omitempty"`
}

type Expression_BinaryExpr struct {
	BinaryExpr *BinaryExpr `protobuf:"bytes,17,opt,name=binary_expr,json=binaryExpr,proto3,oneof" json:"binaryExpr,omitempty"`
}

type Expression_BetweenExpr struct {
	BetweenExpr *BetweenExpr `protobuf:"bytes,18,opt,name=between_expr,json=betweenExpr,proto3,oneof" json:"betweenExpr,omitempty"`
}

type Expression_InExpr struct {
	InExpr *InExpr `protobuf:"bytes,19,opt,name=in_expr,json=inExpr,proto3,oneof" json:"inExpr,omitempty"`
}

type Expression_CaseExpr struct {
	CaseExpr *CaseExpr `protobuf:"bytes,20,opt,name=case_expr,json=caseExpr,proto3,oneof" json:"caseExpr,omitempty"`
}

type Expression_FunctionCallExpr struct {
	FunctionCallExpr *FunctionCallExpr `protobuf:"bytes,21,opt,name=function_call_expr,json=functionCallExpr,proto3,oneof" json:"functionCallExpr,omitempty"`
}

type Expression_SubqueryExpr struct {
	SubqueryExpr *SubqueryExpr `protobuf:"bytes,30,opt,name=subquery_expr,json=subqueryExpr,proto3,oneof" json:"subqueryExpr,omitempty"`
}

func (*Expression_NullLiteralExpr) isExpression_Expression() {}

func (*Expression_BoolLiteralExpr) isExpression_Expression() {}

func (*Expression_IntegerLiteralExpr) isExpression_Expression() {}

func (*Expression_FloatLiteralExpr) isExpression_Expression() {}

func (*Expression_StringLiteralExpr) isExpression_Expression() {}

func (*Expression_BlobLiteralExpr) isExpression_Expression() {}

func (*Expression_IdentifierExpr) isExpression_Expression() {}

func (*Expression_BindParameterExpr) isExpression_Expression() {}

func (*Expression_ColumnRefExpr) isExpression_Expression() {}

func (*Expression_PrefixUnaryExpr) isExpression_Expression() {}

func (*Expression_PostfixUnaryExpr) isExpression_Expression() {}

func (*Expression_BinaryExpr) isExpression_Expression() {}

func (*Expression_BetweenExpr) isExpression_Expression() {}

func (*Expression_InExpr) isExpression_Expression() {}

func (*Expression_CaseExpr) isExpression_Expression() {}

func (*Expression_FunctionCallExpr) isExpression_Expression() {}

func (*Expression_SubqueryExpr) isExpression_Expression() {}

type FromClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Tables        []*Table       `protobuf:"bytes,10,rep,name=tables,proto3" json:"tables,omitempty"`
	Join          *JoinClause    `protobuf:"bytes,11,opt,name=join,proto3" json:"join,omitempty"`
}

func (x *FromClause) Reset() {
	*x = FromClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromClause) ProtoMessage() {}

func (x *FromClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromClause.ProtoReflect.Descriptor instead.
func (*FromClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{6}
}

func (x *FromClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *FromClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *FromClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *FromClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *FromClause) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *FromClause) GetJoin() *JoinClause {
	if x != nil {
		return x.Join
	}
	return nil
}

type GroupByClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Expressions   []*Expression  `protobuf:"bytes,10,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *GroupByClause) Reset() {
	*x = GroupByClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByClause) ProtoMessage() {}

func (x *GroupByClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByClause.ProtoReflect.Descriptor instead.
func (*GroupByClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{7}
}

func (x *GroupByClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *GroupByClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *GroupByClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *GroupByClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *GroupByClause) GetExpressions() []*Expression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type HavingClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Expression    *Expression    `protobuf:"bytes,10,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *HavingClause) Reset() {
	*x = HavingClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HavingClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HavingClause) ProtoMessage() {}

func (x *HavingClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HavingClause.ProtoReflect.Descriptor instead.
func (*HavingClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{8}
}

func (x *HavingClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *HavingClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *HavingClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *HavingClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *HavingClause) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type JoinClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position         `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position         `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64                  `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool                   `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Table         *Table                 `protobuf:"bytes,10,opt,name=table,proto3" json:"table,omitempty"`
	Operator      JoinClause_Operator    `protobuf:"varint,15,opt,name=operator,proto3,enum=mojo.db.sql.JoinClause_Operator" json:"operator,omitempty"`
	Left          *JoinClause            `protobuf:"bytes,16,opt,name=left,proto3" json:"left,omitempty"`
	Right         *JoinClause            `protobuf:"bytes,17,opt,name=right,proto3" json:"right,omitempty"`
	Constraint    *JoinClause_Constraint `protobuf:"bytes,18,opt,name=constraint,proto3" json:"constraint,omitempty"`
}

func (x *JoinClause) Reset() {
	*x = JoinClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinClause) ProtoMessage() {}

func (x *JoinClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinClause.ProtoReflect.Descriptor instead.
func (*JoinClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{9}
}

func (x *JoinClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *JoinClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *JoinClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *JoinClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *JoinClause) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *JoinClause) GetOperator() JoinClause_Operator {
	if x != nil {
		return x.Operator
	}
	return JoinClause_OPERATOR_UNSPECIFIED
}

func (x *JoinClause) GetLeft() *JoinClause {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *JoinClause) GetRight() *JoinClause {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *JoinClause) GetConstraint() *JoinClause_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type LimitClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Rows          *Expression    `protobuf:"bytes,10,opt,name=rows,proto3" json:"rows,omitempty"`
	// Types that are assignable to Offset:
	//	*LimitClause_Expression
	//	*LimitClause_OffsetClause
	Offset isLimitClause_Offset `protobuf_oneof:"offset" json:"offset,omitempty"`
}

func (x *LimitClause) Reset() {
	*x = LimitClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitClause) ProtoMessage() {}

func (x *LimitClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitClause.ProtoReflect.Descriptor instead.
func (*LimitClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{10}
}

func (x *LimitClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *LimitClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *LimitClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *LimitClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *LimitClause) GetRows() *Expression {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (m *LimitClause) GetOffset() isLimitClause_Offset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (x *LimitClause) GetExpression() *Expression {
	if x, ok := x.GetOffset().(*LimitClause_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *LimitClause) GetOffsetClause() *OffsetClause {
	if x, ok := x.GetOffset().(*LimitClause_OffsetClause); ok {
		return x.OffsetClause
	}
	return nil
}

type isLimitClause_Offset interface {
	isLimitClause_Offset()
}

type LimitClause_Expression struct {
	Expression *Expression `protobuf:"bytes,11,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
}

type LimitClause_OffsetClause struct {
	OffsetClause *OffsetClause `protobuf:"bytes,12,opt,name=offset_clause,json=offsetClause,proto3,oneof" json:"offsetClause,omitempty"`
}

func (*LimitClause_Expression) isLimitClause_Offset() {}

func (*LimitClause_OffsetClause) isLimitClause_Offset() {}

type OffsetClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value         *Expression    `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OffsetClause) Reset() {
	*x = OffsetClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetClause) ProtoMessage() {}

func (x *OffsetClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetClause.ProtoReflect.Descriptor instead.
func (*OffsetClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{11}
}

func (x *OffsetClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *OffsetClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *OffsetClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *OffsetClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *OffsetClause) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type OrderByClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Orderings     []*Ordering    `protobuf:"bytes,10,rep,name=orderings,proto3" json:"orderings,omitempty"`
}

func (x *OrderByClause) Reset() {
	*x = OrderByClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByClause) ProtoMessage() {}

func (x *OrderByClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByClause.ProtoReflect.Descriptor instead.
func (*OrderByClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{12}
}

func (x *OrderByClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *OrderByClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *OrderByClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *OrderByClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *OrderByClause) GetOrderings() []*Ordering {
	if x != nil {
		return x.Orderings
	}
	return nil
}

type Ordering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Collation  string      `protobuf:"bytes,2,opt,name=collation,proto3" json:"collation,omitempty"`
	Order      Order       `protobuf:"varint,3,opt,name=order,proto3,enum=mojo.db.sql.Order" json:"order,omitempty"`
	NullsFirst bool        `protobuf:"varint,5,opt,name=nulls_first,json=nullsFirst,proto3" json:"nullsFirst,omitempty"`
	NullsLast  bool        `protobuf:"varint,6,opt,name=nulls_last,json=nullsLast,proto3" json:"nullsLast,omitempty"`
}

func (x *Ordering) Reset() {
	*x = Ordering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ordering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ordering) ProtoMessage() {}

func (x *Ordering) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ordering.ProtoReflect.Descriptor instead.
func (*Ordering) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{13}
}

func (x *Ordering) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Ordering) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *Ordering) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ORDER_UNSPECIFIED
}

func (x *Ordering) GetNullsFirst() bool {
	if x != nil {
		return x.NullsFirst
	}
	return false
}

func (x *Ordering) GetNullsLast() bool {
	if x != nil {
		return x.NullsLast
	}
	return false
}

type PostfixUnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition  *lang.Position            `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition    *lang.Position            `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind           int32                     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit       bool                      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	OperatorSymbol string                    `protobuf:"bytes,10,opt,name=operator_symbol,json=operatorSymbol,proto3" json:"operatorSymbol,omitempty"`
	Argument       *Expression               `protobuf:"bytes,11,opt,name=argument,proto3" json:"argument,omitempty"`
	Operator       PostfixUnaryExpr_Operator `protobuf:"varint,15,opt,name=operator,proto3,enum=mojo.db.sql.PostfixUnaryExpr_Operator" json:"operator,omitempty"`
}

func (x *PostfixUnaryExpr) Reset() {
	*x = PostfixUnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostfixUnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostfixUnaryExpr) ProtoMessage() {}

func (x *PostfixUnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostfixUnaryExpr.ProtoReflect.Descriptor instead.
func (*PostfixUnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{14}
}

func (x *PostfixUnaryExpr) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *PostfixUnaryExpr) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *PostfixUnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *PostfixUnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *PostfixUnaryExpr) GetOperatorSymbol() string {
	if x != nil {
		return x.OperatorSymbol
	}
	return ""
}

func (x *PostfixUnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *PostfixUnaryExpr) GetOperator() PostfixUnaryExpr_Operator {
	if x != nil {
		return x.Operator
	}
	return PostfixUnaryExpr_OPERATOR_UNSPECIFIED
}

type PrefixUnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition  *lang.Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition    *lang.Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind           int32                    `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit       bool                     `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	OperatorSymbol string                   `protobuf:"bytes,10,opt,name=operator_symbol,json=operatorSymbol,proto3" json:"operatorSymbol,omitempty"`
	Argument       *Expression              `protobuf:"bytes,11,opt,name=argument,proto3" json:"argument,omitempty"`
	Operator       PrefixUnaryExpr_Operator `protobuf:"varint,15,opt,name=operator,proto3,enum=mojo.db.sql.PrefixUnaryExpr_Operator" json:"operator,omitempty"`
}

func (x *PrefixUnaryExpr) Reset() {
	*x = PrefixUnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixUnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixUnaryExpr) ProtoMessage() {}

func (x *PrefixUnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixUnaryExpr.ProtoReflect.Descriptor instead.
func (*PrefixUnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{15}
}

func (x *PrefixUnaryExpr) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *PrefixUnaryExpr) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *PrefixUnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *PrefixUnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *PrefixUnaryExpr) GetOperatorSymbol() string {
	if x != nil {
		return x.OperatorSymbol
	}
	return ""
}

func (x *PrefixUnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *PrefixUnaryExpr) GetOperator() PrefixUnaryExpr_Operator {
	if x != nil {
		return x.Operator
	}
	return PrefixUnaryExpr_OPERATOR_UNSPECIFIED
}

type SelectClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64             `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool              `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Quantifier    DataSetQuantifier `protobuf:"varint,10,opt,name=quantifier,proto3,enum=mojo.db.sql.DataSetQuantifier" json:"quantifier,omitempty"`
	Columns       []*Column         `protobuf:"bytes,12,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *SelectClause) Reset() {
	*x = SelectClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectClause) ProtoMessage() {}

func (x *SelectClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectClause.ProtoReflect.Descriptor instead.
func (*SelectClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{16}
}

func (x *SelectClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SelectClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *SelectClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *SelectClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *SelectClause) GetQuantifier() DataSetQuantifier {
	if x != nil {
		return x.Quantifier
	}
	return DataSetQuantifier_DATA_SET_QUANTIFIER_UNSPECIFIED
}

func (x *SelectClause) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type SelectStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	With          *WithClause    `protobuf:"bytes,10,opt,name=with,proto3" json:"with,omitempty"`
	// Types that are assignable to Select:
	//	*SelectStmt_SelectClause
	//	*SelectStmt_CompoundSelect
	Select  isSelectStmt_Select `protobuf_oneof:"select" json:"select,omitempty"`
	Values  *ValuesClause       `protobuf:"bytes,13,opt,name=values,proto3" json:"values,omitempty"`
	From    *FromClause         `protobuf:"bytes,14,opt,name=from,proto3" json:"from,omitempty"`
	Where   *WhereClause        `protobuf:"bytes,15,opt,name=where,proto3" json:"where,omitempty"`
	GroupBy *GroupByClause      `protobuf:"bytes,16,opt,name=group_by,json=groupBy,proto3" json:"groupBy,omitempty"`
	Having  *HavingClause       `protobuf:"bytes,17,opt,name=having,proto3" json:"having,omitempty"`
	OrderBy *OrderByClause      `protobuf:"bytes,20,opt,name=order_by,json=orderBy,proto3" json:"orderBy,omitempty"`
	Limit   *LimitClause        `protobuf:"bytes,21,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SelectStmt) Reset() {
	*x = SelectStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectStmt) ProtoMessage() {}

func (x *SelectStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectStmt.ProtoReflect.Descriptor instead.
func (*SelectStmt) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{17}
}

func (x *SelectStmt) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SelectStmt) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *SelectStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *SelectStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *SelectStmt) GetWith() *WithClause {
	if x != nil {
		return x.With
	}
	return nil
}

func (m *SelectStmt) GetSelect() isSelectStmt_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (x *SelectStmt) GetSelectClause() *SelectClause {
	if x, ok := x.GetSelect().(*SelectStmt_SelectClause); ok {
		return x.SelectClause
	}
	return nil
}

func (x *SelectStmt) GetCompoundSelect() *CompoundSelect {
	if x, ok := x.GetSelect().(*SelectStmt_CompoundSelect); ok {
		return x.CompoundSelect
	}
	return nil
}

func (x *SelectStmt) GetValues() *ValuesClause {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SelectStmt) GetFrom() *FromClause {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SelectStmt) GetWhere() *WhereClause {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *SelectStmt) GetGroupBy() *GroupByClause {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SelectStmt) GetHaving() *HavingClause {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *SelectStmt) GetOrderBy() *OrderByClause {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SelectStmt) GetLimit() *LimitClause {
	if x != nil {
		return x.Limit
	}
	return nil
}

type isSelectStmt_Select interface {
	isSelectStmt_Select()
}

type SelectStmt_SelectClause struct {
	SelectClause *SelectClause `protobuf:"bytes,11,opt,name=select_clause,json=selectClause,proto3,oneof" json:"selectClause,omitempty"`
}

type SelectStmt_CompoundSelect struct {
	CompoundSelect *CompoundSelect `protobuf:"bytes,12,opt,name=compound_select,json=compoundSelect,proto3,oneof" json:"compoundSelect,omitempty"`
}

func (*SelectStmt_SelectClause) isSelectStmt_Select() {}

func (*SelectStmt_CompoundSelect) isSelectStmt_Select() {}

type SubqueryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Exists        bool           `protobuf:"varint,10,opt,name=exists,proto3" json:"exists,omitempty"`
	Query         *SelectStmt    `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SubqueryExpr) Reset() {
	*x = SubqueryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubqueryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubqueryExpr) ProtoMessage() {}

func (x *SubqueryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubqueryExpr.ProtoReflect.Descriptor instead.
func (*SubqueryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{18}
}

func (x *SubqueryExpr) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SubqueryExpr) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *SubqueryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *SubqueryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *SubqueryExpr) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *SubqueryExpr) GetQuery() *SelectStmt {
	if x != nil {
		return x.Query
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Table:
	//	*Table_TableNameVal
	//	*Table_TableFunctionNameVal
	//	*Table_TableQueryVal
	Table isTable_Table `protobuf_oneof:"table" json:"table,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{19}
}

func (m *Table) GetTable() isTable_Table {
	if m != nil {
		return m.Table
	}
	return nil
}

func (x *Table) GetTableNameVal() *TableName {
	if x, ok := x.GetTable().(*Table_TableNameVal); ok {
		return x.TableNameVal
	}
	return nil
}

func (x *Table) GetTableFunctionNameVal() *TableFunctionName {
	if x, ok := x.GetTable().(*Table_TableFunctionNameVal); ok {
		return x.TableFunctionNameVal
	}
	return nil
}

func (x *Table) GetTableQueryVal() *TableQuery {
	if x, ok := x.GetTable().(*Table_TableQueryVal); ok {
		return x.TableQueryVal
	}
	return nil
}

type isTable_Table interface {
	isTable_Table()
}

type Table_TableNameVal struct {
	TableNameVal *TableName `protobuf:"bytes,1,opt,name=table_name_val,json=tableNameVal,proto3,oneof" json:"tableNameVal,omitempty"`
}

type Table_TableFunctionNameVal struct {
	TableFunctionNameVal *TableFunctionName `protobuf:"bytes,2,opt,name=table_function_name_val,json=tableFunctionNameVal,proto3,oneof" json:"tableFunctionNameVal,omitempty"`
}

type Table_TableQueryVal struct {
	TableQueryVal *TableQuery `protobuf:"bytes,3,opt,name=table_query_val,json=tableQueryVal,proto3,oneof" json:"tableQueryVal,omitempty"`
}

func (*Table_TableNameVal) isTable_Table() {}

func (*Table_TableFunctionNameVal) isTable_Table() {}

func (*Table_TableQueryVal) isTable_Table() {}

type TableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string `protobuf:"bytes,10,opt,name=schema_name,json=schemaName,proto3" json:"schemaName,omitempty"`
	Name       string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Alias      string `protobuf:"bytes,15,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *TableName) Reset() {
	*x = TableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableName) ProtoMessage() {}

func (x *TableName) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableName.ProtoReflect.Descriptor instead.
func (*TableName) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{20}
}

func (x *TableName) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *TableName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableName) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type TableFunctionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string        `protobuf:"bytes,10,opt,name=schema_name,json=schemaName,proto3" json:"schemaName,omitempty"`
	Name       string        `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Arguments  []*Expression `protobuf:"bytes,14,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Alias      string        `protobuf:"bytes,15,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *TableFunctionName) Reset() {
	*x = TableFunctionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFunctionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFunctionName) ProtoMessage() {}

func (x *TableFunctionName) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFunctionName.ProtoReflect.Descriptor instead.
func (*TableFunctionName) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{21}
}

func (x *TableFunctionName) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *TableFunctionName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableFunctionName) GetArguments() []*Expression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *TableFunctionName) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type TableQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *SelectStmt `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	Alias string      `protobuf:"bytes,15,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *TableQuery) Reset() {
	*x = TableQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableQuery) ProtoMessage() {}

func (x *TableQuery) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableQuery.ProtoReflect.Descriptor instead.
func (*TableQuery) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{22}
}

func (x *TableQuery) GetQuery() *SelectStmt {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TableQuery) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type UnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition  *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition    *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind           int32          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit       bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	OperatorSymbol string         `protobuf:"bytes,10,opt,name=operator_symbol,json=operatorSymbol,proto3" json:"operatorSymbol,omitempty"`
	Argument       *Expression    `protobuf:"bytes,11,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *UnaryExpr) Reset() {
	*x = UnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryExpr) ProtoMessage() {}

func (x *UnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryExpr.ProtoReflect.Descriptor instead.
func (*UnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{23}
}

func (x *UnaryExpr) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *UnaryExpr) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *UnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *UnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *UnaryExpr) GetOperatorSymbol() string {
	if x != nil {
		return x.OperatorSymbol
	}
	return ""
}

func (x *UnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type ValuesClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Values        []*Expression  `protobuf:"bytes,10,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ValuesClause) Reset() {
	*x = ValuesClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesClause) ProtoMessage() {}

func (x *ValuesClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesClause.ProtoReflect.Descriptor instead.
func (*ValuesClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{24}
}

func (x *ValuesClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ValuesClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ValuesClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ValuesClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ValuesClause) GetValues() []*Expression {
	if x != nil {
		return x.Values
	}
	return nil
}

type WhereClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Expression    *Expression    `protobuf:"bytes,10,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *WhereClause) Reset() {
	*x = WhereClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereClause) ProtoMessage() {}

func (x *WhereClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereClause.ProtoReflect.Descriptor instead.
func (*WhereClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{25}
}

func (x *WhereClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *WhereClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *WhereClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *WhereClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *WhereClause) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type TemporaryTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Columns  []string    `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	Subquery *SelectStmt `protobuf:"bytes,3,opt,name=subquery,proto3" json:"subquery,omitempty"`
}

func (x *TemporaryTable) Reset() {
	*x = TemporaryTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryTable) ProtoMessage() {}

func (x *TemporaryTable) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryTable.ProtoReflect.Descriptor instead.
func (*TemporaryTable) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{26}
}

func (x *TemporaryTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemporaryTable) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TemporaryTable) GetSubquery() *SelectStmt {
	if x != nil {
		return x.Subquery
	}
	return nil
}

type WithClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64             `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool              `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Tables        []*TemporaryTable `protobuf:"bytes,10,rep,name=tables,proto3" json:"tables,omitempty"`
	Recursive     bool              `protobuf:"varint,15,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *WithClause) Reset() {
	*x = WithClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithClause) ProtoMessage() {}

func (x *WithClause) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithClause.ProtoReflect.Descriptor instead.
func (*WithClause) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{27}
}

func (x *WithClause) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *WithClause) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *WithClause) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *WithClause) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *WithClause) GetTables() []*TemporaryTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *WithClause) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type JoinClause_Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V int64 `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *JoinClause_Constraint) Reset() {
	*x = JoinClause_Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_sql_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinClause_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinClause_Constraint) ProtoMessage() {}

func (x *JoinClause_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_sql_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinClause_Constraint.ProtoReflect.Descriptor instead.
func (*JoinClause_Constraint) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_sql_proto_rawDescGZIP(), []int{9, 0}
}

func (x *JoinClause_Constraint) GetV() int64 {
	if x != nil {
		return x.V
	}
	return 0
}

var File_mojo_db_sql_sql_proto protoreflect.FileDescriptor

var file_mojo_db_sql_sql_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x73, 0x71,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62,
	0x2e, 0x73, 0x71, 0x6c, 0x1a, 0x1e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62,
	0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e,
	0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb,
	0x07, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf2, 0x03, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49,
	0x4e, 0x55, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x54, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x0c, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x54, 0x45, 0x10,
	0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e,
	0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41,
	0x4e, 0x44, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x10, 0x1a,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x49, 0x54,
	0x5f, 0x58, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x49, 0x53, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x10, 0x28, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x29,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x10, 0x2b, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x10, 0x32, 0x22, 0x9e, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x41, 0x6c,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x56, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x2a, 0x0a,
	0x09, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x0d, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x73, 0x22, 0xe3, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2b,
	0x0a, 0x04, 0x77, 0x69, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12,
	0x35, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x65, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x10, 0x03, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22, 0xd7, 0x09,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x51, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x4e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x4a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f,
	0x62, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x46, 0x0a, 0x0f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x50, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x48, 0x00, 0x52, 0x11, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4a, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74,
	0x66, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x49, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x53, 0x75, 0x62,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xfa, 0x03, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x1a, 0x1a, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x76, 0x22, 0x24, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x22,
	0xe5, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x73,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x22, 0xc2, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x66, 0x69, 0x78, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x68, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x63, 0x22, 0xf7, 0x03, 0x0a, 0x0f, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4c,
	0x44, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x63, 0x22, 0xa1, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xd2, 0x05, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x77, 0x69,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x2e, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22, 0xf9, 0x01, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d,
	0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xec, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x12, 0x57, 0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x42, 0x07,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x56, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22,
	0x95, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x51, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x09, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xea, 0x01, 0x0a, 0x0b, 0x57, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a,
	0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x42, 0x57, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x71, 0x6c, 0x42, 0x08, 0x53, 0x71, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x64, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x3b, 0x73, 0x71,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mojo_db_sql_sql_proto_rawDescOnce sync.Once
	file_mojo_db_sql_sql_proto_rawDescData = file_mojo_db_sql_sql_proto_rawDesc
)

func file_mojo_db_sql_sql_proto_rawDescGZIP() []byte {
	file_mojo_db_sql_sql_proto_rawDescOnce.Do(func() {
		file_mojo_db_sql_sql_proto_rawDescData = protoimpl.X.CompressGZIP(file_mojo_db_sql_sql_proto_rawDescData)
	})
	return file_mojo_db_sql_sql_proto_rawDescData
}

var file_mojo_db_sql_sql_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_mojo_db_sql_sql_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_mojo_db_sql_sql_proto_goTypes = []interface{}{
	(BinaryExpr_Operator)(0),        // 0: mojo.db.sql.BinaryExpr.Operator
	(CompoundSelect_Operator)(0),    // 1: mojo.db.sql.CompoundSelect.Operator
	(JoinClause_Operator)(0),        // 2: mojo.db.sql.JoinClause.Operator
	(PostfixUnaryExpr_Operator)(0),  // 3: mojo.db.sql.PostfixUnaryExpr.Operator
	(PrefixUnaryExpr_Operator)(0),   // 4: mojo.db.sql.PrefixUnaryExpr.Operator
	(*BinaryExpr)(nil),              // 5: mojo.db.sql.BinaryExpr
	(*Column)(nil),                  // 6: mojo.db.sql.Column
	(*AllColumn)(nil),               // 7: mojo.db.sql.AllColumn
	(*DerivedColumn)(nil),           // 8: mojo.db.sql.DerivedColumn
	(*CompoundSelect)(nil),          // 9: mojo.db.sql.CompoundSelect
	(*Expression)(nil),              // 10: mojo.db.sql.Expression
	(*FromClause)(nil),              // 11: mojo.db.sql.FromClause
	(*GroupByClause)(nil),           // 12: mojo.db.sql.GroupByClause
	(*HavingClause)(nil),            // 13: mojo.db.sql.HavingClause
	(*JoinClause)(nil),              // 14: mojo.db.sql.JoinClause
	(*LimitClause)(nil),             // 15: mojo.db.sql.LimitClause
	(*OffsetClause)(nil),            // 16: mojo.db.sql.OffsetClause
	(*OrderByClause)(nil),           // 17: mojo.db.sql.OrderByClause
	(*Ordering)(nil),                // 18: mojo.db.sql.Ordering
	(*PostfixUnaryExpr)(nil),        // 19: mojo.db.sql.PostfixUnaryExpr
	(*PrefixUnaryExpr)(nil),         // 20: mojo.db.sql.PrefixUnaryExpr
	(*SelectClause)(nil),            // 21: mojo.db.sql.SelectClause
	(*SelectStmt)(nil),              // 22: mojo.db.sql.SelectStmt
	(*SubqueryExpr)(nil),            // 23: mojo.db.sql.SubqueryExpr
	(*Table)(nil),                   // 24: mojo.db.sql.Table
	(*TableName)(nil),               // 25: mojo.db.sql.TableName
	(*TableFunctionName)(nil),       // 26: mojo.db.sql.TableFunctionName
	(*TableQuery)(nil),              // 27: mojo.db.sql.TableQuery
	(*UnaryExpr)(nil),               // 28: mojo.db.sql.UnaryExpr
	(*ValuesClause)(nil),            // 29: mojo.db.sql.ValuesClause
	(*WhereClause)(nil),             // 30: mojo.db.sql.WhereClause
	(*TemporaryTable)(nil),          // 31: mojo.db.sql.TemporaryTable
	(*WithClause)(nil),              // 32: mojo.db.sql.WithClause
	(*JoinClause_Constraint)(nil),   // 33: mojo.db.sql.JoinClause.Constraint
	(*lang.Position)(nil),           // 34: mojo.lang.Position
	(*lang.NullLiteralExpr)(nil),    // 35: mojo.lang.NullLiteralExpr
	(*lang.BoolLiteralExpr)(nil),    // 36: mojo.lang.BoolLiteralExpr
	(*lang.IntegerLiteralExpr)(nil), // 37: mojo.lang.IntegerLiteralExpr
	(*lang.FloatLiteralExpr)(nil),   // 38: mojo.lang.FloatLiteralExpr
	(*lang.StringLiteralExpr)(nil),  // 39: mojo.lang.StringLiteralExpr
	(*BlobLiteralExpr)(nil),         // 40: mojo.db.sql.BlobLiteralExpr
	(*IdentifierExpr)(nil),          // 41: mojo.db.sql.IdentifierExpr
	(*BindParameterExpr)(nil),       // 42: mojo.db.sql.BindParameterExpr
	(*ColumnRefExpr)(nil),           // 43: mojo.db.sql.ColumnRefExpr
	(*BetweenExpr)(nil),             // 44: mojo.db.sql.BetweenExpr
	(*InExpr)(nil),                  // 45: mojo.db.sql.InExpr
	(*CaseExpr)(nil),                // 46: mojo.db.sql.CaseExpr
	(*FunctionCallExpr)(nil),        // 47: mojo.db.sql.FunctionCallExpr
	(Order)(0),                      // 48: mojo.db.sql.Order
	(DataSetQuantifier)(0),          // 49: mojo.db.sql.DataSetQuantifier
}
var file_mojo_db_sql_sql_proto_depIdxs = []int32{
	34,  // 0: mojo.db.sql.BinaryExpr.start_position:type_name -> mojo.lang.Position
	34,  // 1: mojo.db.sql.BinaryExpr.end_position:type_name -> mojo.lang.Position
	0,   // 2: mojo.db.sql.BinaryExpr.operator:type_name -> mojo.db.sql.BinaryExpr.Operator
	10,  // 3: mojo.db.sql.BinaryExpr.left_argument:type_name -> mojo.db.sql.Expression
	10,  // 4: mojo.db.sql.BinaryExpr.right_argument:type_name -> mojo.db.sql.Expression
	7,   // 5: mojo.db.sql.Column.all_column_val:type_name -> mojo.db.sql.AllColumn
	8,   // 6: mojo.db.sql.Column.derived_column_val:type_name -> mojo.db.sql.DerivedColumn
	10,  // 7: mojo.db.sql.DerivedColumn.expr:type_name -> mojo.db.sql.Expression
	34,  // 8: mojo.db.sql.CompoundSelect.start_position:type_name -> mojo.lang.Position
	34,  // 9: mojo.db.sql.CompoundSelect.end_position:type_name -> mojo.lang.Position
	32,  // 10: mojo.db.sql.CompoundSelect.with:type_name -> mojo.db.sql.WithClause
	21,  // 11: mojo.db.sql.CompoundSelect.select_clause:type_name -> mojo.db.sql.SelectClause
	9,   // 12: mojo.db.sql.CompoundSelect.compound_select:type_name -> mojo.db.sql.CompoundSelect
	29,  // 13: mojo.db.sql.CompoundSelect.values:type_name -> mojo.db.sql.ValuesClause
	11,  // 14: mojo.db.sql.CompoundSelect.from:type_name -> mojo.db.sql.FromClause
	30,  // 15: mojo.db.sql.CompoundSelect.where:type_name -> mojo.db.sql.WhereClause
	12,  // 16: mojo.db.sql.CompoundSelect.group_by:type_name -> mojo.db.sql.GroupByClause
	13,  // 17: mojo.db.sql.CompoundSelect.having:type_name -> mojo.db.sql.HavingClause
	17,  // 18: mojo.db.sql.CompoundSelect.order_by:type_name -> mojo.db.sql.OrderByClause
	15,  // 19: mojo.db.sql.CompoundSelect.limit:type_name -> mojo.db.sql.LimitClause
	1,   // 20: mojo.db.sql.CompoundSelect.operator:type_name -> mojo.db.sql.CompoundSelect.Operator
	9,   // 21: mojo.db.sql.CompoundSelect.left:type_name -> mojo.db.sql.CompoundSelect
	9,   // 22: mojo.db.sql.CompoundSelect.right:type_name -> mojo.db.sql.CompoundSelect
	35,  // 23: mojo.db.sql.Expression.null_literal_expr:type_name -> mojo.lang.NullLiteralExpr
	36,  // 24: mojo.db.sql.Expression.bool_literal_expr:type_name -> mojo.lang.BoolLiteralExpr
	37,  // 25: mojo.db.sql.Expression.integer_literal_expr:type_name -> mojo.lang.IntegerLiteralExpr
	38,  // 26: mojo.db.sql.Expression.float_literal_expr:type_name -> mojo.lang.FloatLiteralExpr
	39,  // 27: mojo.db.sql.Expression.string_literal_expr:type_name -> mojo.lang.StringLiteralExpr
	40,  // 28: mojo.db.sql.Expression.blob_literal_expr:type_name -> mojo.db.sql.BlobLiteralExpr
	41,  // 29: mojo.db.sql.Expression.identifier_expr:type_name -> mojo.db.sql.IdentifierExpr
	42,  // 30: mojo.db.sql.Expression.bind_parameter_expr:type_name -> mojo.db.sql.BindParameterExpr
	43,  // 31: mojo.db.sql.Expression.column_ref_expr:type_name -> mojo.db.sql.ColumnRefExpr
	20,  // 32: mojo.db.sql.Expression.prefix_unary_expr:type_name -> mojo.db.sql.PrefixUnaryExpr
	19,  // 33: mojo.db.sql.Expression.postfix_unary_expr:type_name -> mojo.db.sql.PostfixUnaryExpr
	5,   // 34: mojo.db.sql.Expression.binary_expr:type_name -> mojo.db.sql.BinaryExpr
	44,  // 35: mojo.db.sql.Expression.between_expr:type_name -> mojo.db.sql.BetweenExpr
	45,  // 36: mojo.db.sql.Expression.in_expr:type_name -> mojo.db.sql.InExpr
	46,  // 37: mojo.db.sql.Expression.case_expr:type_name -> mojo.db.sql.CaseExpr
	47,  // 38: mojo.db.sql.Expression.function_call_expr:type_name -> mojo.db.sql.FunctionCallExpr
	23,  // 39: mojo.db.sql.Expression.subquery_expr:type_name -> mojo.db.sql.SubqueryExpr
	34,  // 40: mojo.db.sql.FromClause.start_position:type_name -> mojo.lang.Position
	34,  // 41: mojo.db.sql.FromClause.end_position:type_name -> mojo.lang.Position
	24,  // 42: mojo.db.sql.FromClause.tables:type_name -> mojo.db.sql.Table
	14,  // 43: mojo.db.sql.FromClause.join:type_name -> mojo.db.sql.JoinClause
	34,  // 44: mojo.db.sql.GroupByClause.start_position:type_name -> mojo.lang.Position
	34,  // 45: mojo.db.sql.GroupByClause.end_position:type_name -> mojo.lang.Position
	10,  // 46: mojo.db.sql.GroupByClause.expressions:type_name -> mojo.db.sql.Expression
	34,  // 47: mojo.db.sql.HavingClause.start_position:type_name -> mojo.lang.Position
	34,  // 48: mojo.db.sql.HavingClause.end_position:type_name -> mojo.lang.Position
	10,  // 49: mojo.db.sql.HavingClause.expression:type_name -> mojo.db.sql.Expression
	34,  // 50: mojo.db.sql.JoinClause.start_position:type_name -> mojo.lang.Position
	34,  // 51: mojo.db.sql.JoinClause.end_position:type_name -> mojo.lang.Position
	24,  // 52: mojo.db.sql.JoinClause.table:type_name -> mojo.db.sql.Table
	2,   // 53: mojo.db.sql.JoinClause.operator:type_name -> mojo.db.sql.JoinClause.Operator
	14,  // 54: mojo.db.sql.JoinClause.left:type_name -> mojo.db.sql.JoinClause
	14,  // 55: mojo.db.sql.JoinClause.right:type_name -> mojo.db.sql.JoinClause
	33,  // 56: mojo.db.sql.JoinClause.constraint:type_name -> mojo.db.sql.JoinClause.Constraint
	34,  // 57: mojo.db.sql.LimitClause.start_position:type_name -> mojo.lang.Position
	34,  // 58: mojo.db.sql.LimitClause.end_position:type_name -> mojo.lang.Position
	10,  // 59: mojo.db.sql.LimitClause.rows:type_name -> mojo.db.sql.Expression
	10,  // 60: mojo.db.sql.LimitClause.expression:type_name -> mojo.db.sql.Expression
	16,  // 61: mojo.db.sql.LimitClause.offset_clause:type_name -> mojo.db.sql.OffsetClause
	34,  // 62: mojo.db.sql.OffsetClause.start_position:type_name -> mojo.lang.Position
	34,  // 63: mojo.db.sql.OffsetClause.end_position:type_name -> mojo.lang.Position
	10,  // 64: mojo.db.sql.OffsetClause.value:type_name -> mojo.db.sql.Expression
	34,  // 65: mojo.db.sql.OrderByClause.start_position:type_name -> mojo.lang.Position
	34,  // 66: mojo.db.sql.OrderByClause.end_position:type_name -> mojo.lang.Position
	18,  // 67: mojo.db.sql.OrderByClause.orderings:type_name -> mojo.db.sql.Ordering
	10,  // 68: mojo.db.sql.Ordering.expression:type_name -> mojo.db.sql.Expression
	48,  // 69: mojo.db.sql.Ordering.order:type_name -> mojo.db.sql.Order
	34,  // 70: mojo.db.sql.PostfixUnaryExpr.start_position:type_name -> mojo.lang.Position
	34,  // 71: mojo.db.sql.PostfixUnaryExpr.end_position:type_name -> mojo.lang.Position
	10,  // 72: mojo.db.sql.PostfixUnaryExpr.argument:type_name -> mojo.db.sql.Expression
	3,   // 73: mojo.db.sql.PostfixUnaryExpr.operator:type_name -> mojo.db.sql.PostfixUnaryExpr.Operator
	34,  // 74: mojo.db.sql.PrefixUnaryExpr.start_position:type_name -> mojo.lang.Position
	34,  // 75: mojo.db.sql.PrefixUnaryExpr.end_position:type_name -> mojo.lang.Position
	10,  // 76: mojo.db.sql.PrefixUnaryExpr.argument:type_name -> mojo.db.sql.Expression
	4,   // 77: mojo.db.sql.PrefixUnaryExpr.operator:type_name -> mojo.db.sql.PrefixUnaryExpr.Operator
	34,  // 78: mojo.db.sql.SelectClause.start_position:type_name -> mojo.lang.Position
	34,  // 79: mojo.db.sql.SelectClause.end_position:type_name -> mojo.lang.Position
	49,  // 80: mojo.db.sql.SelectClause.quantifier:type_name -> mojo.db.sql.DataSetQuantifier
	6,   // 81: mojo.db.sql.SelectClause.columns:type_name -> mojo.db.sql.Column
	34,  // 82: mojo.db.sql.SelectStmt.start_position:type_name -> mojo.lang.Position
	34,  // 83: mojo.db.sql.SelectStmt.end_position:type_name -> mojo.lang.Position
	32,  // 84: mojo.db.sql.SelectStmt.with:type_name -> mojo.db.sql.WithClause
	21,  // 85: mojo.db.sql.SelectStmt.select_clause:type_name -> mojo.db.sql.SelectClause
	9,   // 86: mojo.db.sql.SelectStmt.compound_select:type_name -> mojo.db.sql.CompoundSelect
	29,  // 87: mojo.db.sql.SelectStmt.values:type_name -> mojo.db.sql.ValuesClause
	11,  // 88: mojo.db.sql.SelectStmt.from:type_name -> mojo.db.sql.FromClause
	30,  // 89: mojo.db.sql.SelectStmt.where:type_name -> mojo.db.sql.WhereClause
	12,  // 90: mojo.db.sql.SelectStmt.group_by:type_name -> mojo.db.sql.GroupByClause
	13,  // 91: mojo.db.sql.SelectStmt.having:type_name -> mojo.db.sql.HavingClause
	17,  // 92: mojo.db.sql.SelectStmt.order_by:type_name -> mojo.db.sql.OrderByClause
	15,  // 93: mojo.db.sql.SelectStmt.limit:type_name -> mojo.db.sql.LimitClause
	34,  // 94: mojo.db.sql.SubqueryExpr.start_position:type_name -> mojo.lang.Position
	34,  // 95: mojo.db.sql.SubqueryExpr.end_position:type_name -> mojo.lang.Position
	22,  // 96: mojo.db.sql.SubqueryExpr.query:type_name -> mojo.db.sql.SelectStmt
	25,  // 97: mojo.db.sql.Table.table_name_val:type_name -> mojo.db.sql.TableName
	26,  // 98: mojo.db.sql.Table.table_function_name_val:type_name -> mojo.db.sql.TableFunctionName
	27,  // 99: mojo.db.sql.Table.table_query_val:type_name -> mojo.db.sql.TableQuery
	10,  // 100: mojo.db.sql.TableFunctionName.arguments:type_name -> mojo.db.sql.Expression
	22,  // 101: mojo.db.sql.TableQuery.query:type_name -> mojo.db.sql.SelectStmt
	34,  // 102: mojo.db.sql.UnaryExpr.start_position:type_name -> mojo.lang.Position
	34,  // 103: mojo.db.sql.UnaryExpr.end_position:type_name -> mojo.lang.Position
	10,  // 104: mojo.db.sql.UnaryExpr.argument:type_name -> mojo.db.sql.Expression
	34,  // 105: mojo.db.sql.ValuesClause.start_position:type_name -> mojo.lang.Position
	34,  // 106: mojo.db.sql.ValuesClause.end_position:type_name -> mojo.lang.Position
	10,  // 107: mojo.db.sql.ValuesClause.values:type_name -> mojo.db.sql.Expression
	34,  // 108: mojo.db.sql.WhereClause.start_position:type_name -> mojo.lang.Position
	34,  // 109: mojo.db.sql.WhereClause.end_position:type_name -> mojo.lang.Position
	10,  // 110: mojo.db.sql.WhereClause.expression:type_name -> mojo.db.sql.Expression
	22,  // 111: mojo.db.sql.TemporaryTable.subquery:type_name -> mojo.db.sql.SelectStmt
	34,  // 112: mojo.db.sql.WithClause.start_position:type_name -> mojo.lang.Position
	34,  // 113: mojo.db.sql.WithClause.end_position:type_name -> mojo.lang.Position
	31,  // 114: mojo.db.sql.WithClause.tables:type_name -> mojo.db.sql.TemporaryTable
	115, // [115:115] is the sub-list for method output_type
	115, // [115:115] is the sub-list for method input_type
	115, // [115:115] is the sub-list for extension type_name
	115, // [115:115] is the sub-list for extension extendee
	0,   // [0:115] is the sub-list for field type_name
}

func init() { file_mojo_db_sql_sql_proto_init() }
func file_mojo_db_sql_sql_proto_init() {
	if File_mojo_db_sql_sql_proto != nil {
		return
	}
	file_mojo_db_sql_between_expr_proto_init()
	file_mojo_db_sql_bind_parameter_expr_proto_init()
	file_mojo_db_sql_blob_literal_expr_proto_init()
	file_mojo_db_sql_case_expr_proto_init()
	file_mojo_db_sql_clause_proto_init()
	file_mojo_db_sql_column_ref_expr_proto_init()
	file_mojo_db_sql_data_manipulation_stmt_proto_init()
	file_mojo_db_sql_data_set_quantifier_proto_init()
	file_mojo_db_sql_function_call_expr_proto_init()
	file_mojo_db_sql_identifier_expr_proto_init()
	file_mojo_db_sql_in_expr_proto_init()
	file_mojo_db_sql_order_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mojo_db_sql_sql_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivedColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HavingClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ordering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostfixUnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixUnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubqueryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFunctionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_sql_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinClause_Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mojo_db_sql_sql_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Column_AllColumnVal)(nil),
		(*Column_DerivedColumnVal)(nil),
	}
	file_mojo_db_sql_sql_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CompoundSelect_SelectClause)(nil),
		(*CompoundSelect_CompoundSelect)(nil),
	}
	file_mojo_db_sql_sql_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Expression_NullLiteralExpr)(nil),
		(*Expression_BoolLiteralExpr)(nil),
		(*Expression_IntegerLiteralExpr)(nil),
		(*Expression_FloatLiteralExpr)(nil),
		(*Expression_StringLiteralExpr)(nil),
		(*Expression_BlobLiteralExpr)(nil),
		(*Expression_IdentifierExpr)(nil),
		(*Expression_BindParameterExpr)(nil),
		(*Expression_ColumnRefExpr)(nil),
		(*Expression_PrefixUnaryExpr)(nil),
		(*Expression_PostfixUnaryExpr)(nil),
		(*Expression_BinaryExpr)(nil),
		(*Expression_BetweenExpr)(nil),
		(*Expression_InExpr)(nil),
		(*Expression_CaseExpr)(nil),
		(*Expression_FunctionCallExpr)(nil),
		(*Expression_SubqueryExpr)(nil),
	}
	file_mojo_db_sql_sql_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*LimitClause_Expression)(nil),
		(*LimitClause_OffsetClause)(nil),
	}
	file_mojo_db_sql_sql_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SelectStmt_SelectClause)(nil),
		(*SelectStmt_CompoundSelect)(nil),
	}
	file_mojo_db_sql_sql_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Table_TableNameVal)(nil),
		(*Table_TableFunctionNameVal)(nil),
		(*Table_TableQueryVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mojo_db_sql_sql_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mojo_db_sql_sql_proto_goTypes,
		DependencyIndexes: file_mojo_db_sql_sql_proto_depIdxs,
		EnumInfos:         file_mojo_db_sql_sql_proto_enumTypes,
		MessageInfos:      file_mojo_db_sql_sql_proto_msgTypes,
	}.Build()
	File_mojo_db_sql_sql_proto = out.File
	file_mojo_db_sql_sql_proto_rawDesc = nil
	file_mojo_db_sql_sql_proto_goTypes = nil
	file_mojo_db_sql_sql_proto_depIdxs = nil
}
