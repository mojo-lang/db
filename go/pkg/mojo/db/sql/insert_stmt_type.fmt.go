// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sql

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

var InsertStmtTypeNames = map[int32]string{
	0: "insert",
	1: "replace",
	5: "insert_or_replace",
	6: "insert_or_rollback",
	7: "insert_or_abort",
	8: "insert_or_fail",
	9: "insert_or_ignore",
}

var InsertStmtTypeValues = map[string]InsertStmt_Type{
	"insert":             InsertStmt_TYPE_INSERT,
	"replace":            InsertStmt_TYPE_REPLACE,
	"insert_or_replace":  InsertStmt_TYPE_INSERT_OR_REPLACE,
	"insert_or_rollback": InsertStmt_TYPE_INSERT_OR_ROLLBACK,
	"insert_or_abort":    InsertStmt_TYPE_INSERT_OR_ABORT,
	"insert_or_fail":     InsertStmt_TYPE_INSERT_OR_FAIL,
	"insert_or_ignore":   InsertStmt_TYPE_INSERT_OR_IGNORE,
}

func (x InsertStmt_Type) Format() string {
	v := int32(x)
	if s, ok := InsertStmtTypeNames[v]; ok {
		if v == 0 && "unspecified" == strings.ToLower(s) {
			return ""
		}
		return s
	}
	if v == 0 {
		return ""
	}
	return strconv.Itoa(int(v))
}

func (x InsertStmt_Type) ToString() string {
	return x.Format()
}

func (x *InsertStmt_Type) Parse(value string) error {
	if x != nil && len(value) > 0 {
		if s, ok := InsertStmtTypeValues[value]; ok {
			*x = s
		} else {
			v := core.CaseStyler("snake")(value)
			if s, ok = InsertStmtTypeValues[v]; ok {
				*x = s
			} else {
				return fmt.Errorf("invalid InsertStmt_Type: %s", value)
			}
		}
	}
	return nil
}

func ParseInsertStmt_Type(value string) (InsertStmt_Type, error) {
	var v InsertStmt_Type
	if err := (&v).Parse(value); err != nil {
		return v, err
	}
	return v, nil
}
