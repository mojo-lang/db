// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sql

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

var BinaryExprOperatorNames = map[int32]string{
	0:  "unspecified",
	1:  "plus",
	2:  "minus",
	3:  "mul",
	4:  "div",
	5:  "mod",
	10: "lt",
	11: "gt",
	12: "lte",
	13: "gte",
	14: "equal",
	15: "not_equal",
	20: "and",
	21: "or",
	25: "bit_and",
	26: "bit_or",
	27: "bit_xor",
	30: "concat",
	99: "extended",
}

var BinaryExprOperatorValues = map[string]BinaryExpr_Operator{
	"unspecified": BinaryExpr_OPERATOR_UNSPECIFIED,
	"plus":        BinaryExpr_OPERATOR_PLUS,
	"minus":       BinaryExpr_OPERATOR_MINUS,
	"mul":         BinaryExpr_OPERATOR_MUL,
	"div":         BinaryExpr_OPERATOR_DIV,
	"mod":         BinaryExpr_OPERATOR_MOD,
	"lt":          BinaryExpr_OPERATOR_LT,
	"gt":          BinaryExpr_OPERATOR_GT,
	"lte":         BinaryExpr_OPERATOR_LTE,
	"gte":         BinaryExpr_OPERATOR_GTE,
	"equal":       BinaryExpr_OPERATOR_EQUAL,
	"not_equal":   BinaryExpr_OPERATOR_NOT_EQUAL,
	"and":         BinaryExpr_OPERATOR_AND,
	"or":          BinaryExpr_OPERATOR_OR,
	"bit_and":     BinaryExpr_OPERATOR_BIT_AND,
	"bit_or":      BinaryExpr_OPERATOR_BIT_OR,
	"bit_xor":     BinaryExpr_OPERATOR_BIT_XOR,
	"concat":      BinaryExpr_OPERATOR_CONCAT,
	"extended":    BinaryExpr_OPERATOR_EXTENDED,
}

func (x BinaryExpr_Operator) Format() string {
	v := int32(x)
	if s, ok := BinaryExprOperatorNames[v]; ok {
		if v == 0 && "unspecified" == strings.ToLower(s) {
			return ""
		}
		return s
	}
	if v == 0 {
		return ""
	}
	return strconv.Itoa(int(v))
}

func (x BinaryExpr_Operator) ToString() string {
	return x.Format()
}

func (x *BinaryExpr_Operator) Parse(value string) error {
	if x != nil && len(value) > 0 {
		if s, ok := BinaryExprOperatorValues[value]; ok {
			*x = s
		} else {
			v := core.CaseStyler("snake")(value)
			if s, ok = BinaryExprOperatorValues[v]; ok {
				*x = s
			} else {
				return fmt.Errorf("invalid BinaryExpr_Operator: %s", value)
			}
		}
	}
	return nil
}

func ParseBinaryExpr_Operator(value string) (BinaryExpr_Operator, error) {
	var v BinaryExpr_Operator
	if err := (&v).Parse(value); err != nil {
		return v, err
	}
	return v, nil
}
