// Code generated by mojo. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: mojo/db/sql/column_constraint.proto

package sql

import (
	lang "github.com/mojo-lang/lang/go/pkg/mojo/lang"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColumnConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Constraint:
	//	*ColumnConstraint_PrimaryKey_
	//	*ColumnConstraint_NotNull_
	//	*ColumnConstraint_Unique_
	//	*ColumnConstraint_CheckClause
	//	*ColumnConstraint_Default_
	//	*ColumnConstraint_CollateClause
	//	*ColumnConstraint_ForeignKeyClause
	Constraint isColumnConstraint_Constraint `protobuf_oneof:"constraint" json:"constraint,omitempty"`
}

func (x *ColumnConstraint) Reset() {
	*x = ColumnConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnConstraint) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnConstraint) ProtoMessage() {}

func (x *ColumnConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnConstraint.ProtoReflect.Descriptor instead.
func (*ColumnConstraint) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_column_constraint_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnConstraint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ColumnConstraint) GetConstraint() isColumnConstraint_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *ColumnConstraint) GetPrimaryKey() *ColumnConstraint_PrimaryKey {
	if x, ok := x.GetConstraint().(*ColumnConstraint_PrimaryKey_); ok {
		return x.PrimaryKey
	}
	return nil
}

func (x *ColumnConstraint) GetNotNull() *ColumnConstraint_NotNull {
	if x, ok := x.GetConstraint().(*ColumnConstraint_NotNull_); ok {
		return x.NotNull
	}
	return nil
}

func (x *ColumnConstraint) GetUnique() *ColumnConstraint_Unique {
	if x, ok := x.GetConstraint().(*ColumnConstraint_Unique_); ok {
		return x.Unique
	}
	return nil
}

func (x *ColumnConstraint) GetCheckClause() *CheckClause {
	if x, ok := x.GetConstraint().(*ColumnConstraint_CheckClause); ok {
		return x.CheckClause
	}
	return nil
}

func (x *ColumnConstraint) GetDefault() *ColumnConstraint_Default {
	if x, ok := x.GetConstraint().(*ColumnConstraint_Default_); ok {
		return x.Default
	}
	return nil
}

func (x *ColumnConstraint) GetCollateClause() *CollateClause {
	if x, ok := x.GetConstraint().(*ColumnConstraint_CollateClause); ok {
		return x.CollateClause
	}
	return nil
}

func (x *ColumnConstraint) GetForeignKeyClause() *ForeignKeyClause {
	if x, ok := x.GetConstraint().(*ColumnConstraint_ForeignKeyClause); ok {
		return x.ForeignKeyClause
	}
	return nil
}

type isColumnConstraint_Constraint interface {
	isColumnConstraint_Constraint()
}

type ColumnConstraint_PrimaryKey_ struct {
	PrimaryKey *ColumnConstraint_PrimaryKey `protobuf:"bytes,2,opt,name=primary_key,json=primaryKey,proto3,oneof" json:"primaryKey,omitempty"`
}

type ColumnConstraint_NotNull_ struct {
	NotNull *ColumnConstraint_NotNull `protobuf:"bytes,3,opt,name=not_null,json=notNull,proto3,oneof" json:"notNull,omitempty"`
}

type ColumnConstraint_Unique_ struct {
	Unique *ColumnConstraint_Unique `protobuf:"bytes,4,opt,name=unique,proto3,oneof" json:"unique,omitempty"`
}

type ColumnConstraint_CheckClause struct {
	CheckClause *CheckClause `protobuf:"bytes,5,opt,name=check_clause,json=checkClause,proto3,oneof" json:"checkClause,omitempty"`
}

type ColumnConstraint_Default_ struct {
	Default *ColumnConstraint_Default `protobuf:"bytes,6,opt,name=default,proto3,oneof" json:"default,omitempty"`
}

type ColumnConstraint_CollateClause struct {
	CollateClause *CollateClause `protobuf:"bytes,7,opt,name=collate_clause,json=collateClause,proto3,oneof" json:"collateClause,omitempty"`
}

type ColumnConstraint_ForeignKeyClause struct {
	ForeignKeyClause *ForeignKeyClause `protobuf:"bytes,8,opt,name=foreign_key_clause,json=foreignKeyClause,proto3,oneof" json:"foreignKeyClause,omitempty"`
}

func (*ColumnConstraint_PrimaryKey_) isColumnConstraint_Constraint() {}

func (*ColumnConstraint_NotNull_) isColumnConstraint_Constraint() {}

func (*ColumnConstraint_Unique_) isColumnConstraint_Constraint() {}

func (*ColumnConstraint_CheckClause) isColumnConstraint_Constraint() {}

func (*ColumnConstraint_Default_) isColumnConstraint_Constraint() {}

func (*ColumnConstraint_CollateClause) isColumnConstraint_Constraint() {}

func (*ColumnConstraint_ForeignKeyClause) isColumnConstraint_Constraint() {}

type ColumnConstraint_PrimaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order         Order           `protobuf:"varint,1,opt,name=order,proto3,enum=mojo.db.sql.Order" json:"order,omitempty"`
	Conflict      *ConflictClause `protobuf:"bytes,2,opt,name=conflict,proto3" json:"conflict,omitempty"`
	AutoIncrement bool            `protobuf:"varint,3,opt,name=auto_increment,json=autoIncrement,proto3" json:"autoIncrement,omitempty"`
}

func (x *ColumnConstraint_PrimaryKey) Reset() {
	*x = ColumnConstraint_PrimaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnConstraint_PrimaryKey) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnConstraint_PrimaryKey) ProtoMessage() {}

func (x *ColumnConstraint_PrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnConstraint_PrimaryKey.ProtoReflect.Descriptor instead.
func (*ColumnConstraint_PrimaryKey) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_column_constraint_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ColumnConstraint_PrimaryKey) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ORDER_UNSPECIFIED
}

func (x *ColumnConstraint_PrimaryKey) GetConflict() *ConflictClause {
	if x != nil {
		return x.Conflict
	}
	return nil
}

func (x *ColumnConstraint_PrimaryKey) GetAutoIncrement() bool {
	if x != nil {
		return x.AutoIncrement
	}
	return false
}

type ColumnConstraint_NotNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position        `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position        `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64                 `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool                  `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Action        ConflictClause_Action `protobuf:"varint,10,opt,name=action,proto3,enum=mojo.db.sql.ConflictClause_Action" json:"action,omitempty"`
}

func (x *ColumnConstraint_NotNull) Reset() {
	*x = ColumnConstraint_NotNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnConstraint_NotNull) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnConstraint_NotNull) ProtoMessage() {}

func (x *ColumnConstraint_NotNull) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnConstraint_NotNull.ProtoReflect.Descriptor instead.
func (*ColumnConstraint_NotNull) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_column_constraint_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ColumnConstraint_NotNull) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ColumnConstraint_NotNull) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ColumnConstraint_NotNull) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ColumnConstraint_NotNull) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ColumnConstraint_NotNull) GetAction() ConflictClause_Action {
	if x != nil {
		return x.Action
	}
	return ConflictClause_ACTION_ROLLBACK
}

type ColumnConstraint_Unique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *lang.Position        `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *lang.Position        `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64                 `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool                  `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Action        ConflictClause_Action `protobuf:"varint,10,opt,name=action,proto3,enum=mojo.db.sql.ConflictClause_Action" json:"action,omitempty"`
}

func (x *ColumnConstraint_Unique) Reset() {
	*x = ColumnConstraint_Unique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnConstraint_Unique) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnConstraint_Unique) ProtoMessage() {}

func (x *ColumnConstraint_Unique) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnConstraint_Unique.ProtoReflect.Descriptor instead.
func (*ColumnConstraint_Unique) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_column_constraint_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ColumnConstraint_Unique) GetStartPosition() *lang.Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ColumnConstraint_Unique) GetEndPosition() *lang.Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ColumnConstraint_Unique) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ColumnConstraint_Unique) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ColumnConstraint_Unique) GetAction() ConflictClause_Action {
	if x != nil {
		return x.Action
	}
	return ConflictClause_ACTION_ROLLBACK
}

type ColumnConstraint_Default struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ColumnConstraint_Default) Reset() {
	*x = ColumnConstraint_Default{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnConstraint_Default) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnConstraint_Default) ProtoMessage() {}

func (x *ColumnConstraint_Default) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_db_sql_column_constraint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnConstraint_Default.ProtoReflect.Descriptor instead.
func (*ColumnConstraint_Default) Descriptor() ([]byte, []int) {
	return file_mojo_db_sql_column_constraint_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ColumnConstraint_Default) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

var File_mojo_db_sql_column_constraint_proto protoreflect.FileDescriptor

var file_mojo_db_sql_column_constraint_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73,
	0x71, 0x6c, 0x1a, 0x1e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62,
	0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x73, 0x71,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x09,
	0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07,
	0x6e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x12, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x4b, 0x65, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x1a, 0x96, 0x01,
	0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xe9, 0x01, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x42, 0x0a,
	0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42,
	0x63, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x71, 0x6c, 0x42, 0x15, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x64, 0x62, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c,
	0x3b, 0x73, 0x71, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mojo_db_sql_column_constraint_proto_rawDescOnce sync.Once
	file_mojo_db_sql_column_constraint_proto_rawDescData = file_mojo_db_sql_column_constraint_proto_rawDesc
)

func file_mojo_db_sql_column_constraint_proto_rawDescGZIP() []byte {
	file_mojo_db_sql_column_constraint_proto_rawDescOnce.Do(func() {
		file_mojo_db_sql_column_constraint_proto_rawDescData = protoimpl.X.CompressGZIP(file_mojo_db_sql_column_constraint_proto_rawDescData)
	})
	return file_mojo_db_sql_column_constraint_proto_rawDescData
}

var file_mojo_db_sql_column_constraint_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mojo_db_sql_column_constraint_proto_goTypes = []interface{}{
	(*ColumnConstraint)(nil),            // 0: mojo.db.sql.ColumnConstraint
	(*ColumnConstraint_PrimaryKey)(nil), // 1: mojo.db.sql.ColumnConstraint.PrimaryKey
	(*ColumnConstraint_NotNull)(nil),    // 2: mojo.db.sql.ColumnConstraint.NotNull
	(*ColumnConstraint_Unique)(nil),     // 3: mojo.db.sql.ColumnConstraint.Unique
	(*ColumnConstraint_Default)(nil),    // 4: mojo.db.sql.ColumnConstraint.Default
	(*CheckClause)(nil),                 // 5: mojo.db.sql.CheckClause
	(*CollateClause)(nil),               // 6: mojo.db.sql.CollateClause
	(*ForeignKeyClause)(nil),            // 7: mojo.db.sql.ForeignKeyClause
	(Order)(0),                          // 8: mojo.db.sql.Order
	(*ConflictClause)(nil),              // 9: mojo.db.sql.ConflictClause
	(*lang.Position)(nil),               // 10: mojo.lang.Position
	(ConflictClause_Action)(0),          // 11: mojo.db.sql.ConflictClause.Action
	(*Expression)(nil),                  // 12: mojo.db.sql.Expression
}
var file_mojo_db_sql_column_constraint_proto_depIdxs = []int32{
	1,  // 0: mojo.db.sql.ColumnConstraint.primary_key:type_name -> mojo.db.sql.ColumnConstraint.PrimaryKey
	2,  // 1: mojo.db.sql.ColumnConstraint.not_null:type_name -> mojo.db.sql.ColumnConstraint.NotNull
	3,  // 2: mojo.db.sql.ColumnConstraint.unique:type_name -> mojo.db.sql.ColumnConstraint.Unique
	5,  // 3: mojo.db.sql.ColumnConstraint.check_clause:type_name -> mojo.db.sql.CheckClause
	4,  // 4: mojo.db.sql.ColumnConstraint.default:type_name -> mojo.db.sql.ColumnConstraint.Default
	6,  // 5: mojo.db.sql.ColumnConstraint.collate_clause:type_name -> mojo.db.sql.CollateClause
	7,  // 6: mojo.db.sql.ColumnConstraint.foreign_key_clause:type_name -> mojo.db.sql.ForeignKeyClause
	8,  // 7: mojo.db.sql.ColumnConstraint.PrimaryKey.order:type_name -> mojo.db.sql.Order
	9,  // 8: mojo.db.sql.ColumnConstraint.PrimaryKey.conflict:type_name -> mojo.db.sql.ConflictClause
	10, // 9: mojo.db.sql.ColumnConstraint.NotNull.start_position:type_name -> mojo.lang.Position
	10, // 10: mojo.db.sql.ColumnConstraint.NotNull.end_position:type_name -> mojo.lang.Position
	11, // 11: mojo.db.sql.ColumnConstraint.NotNull.action:type_name -> mojo.db.sql.ConflictClause.Action
	10, // 12: mojo.db.sql.ColumnConstraint.Unique.start_position:type_name -> mojo.lang.Position
	10, // 13: mojo.db.sql.ColumnConstraint.Unique.end_position:type_name -> mojo.lang.Position
	11, // 14: mojo.db.sql.ColumnConstraint.Unique.action:type_name -> mojo.db.sql.ConflictClause.Action
	12, // 15: mojo.db.sql.ColumnConstraint.Default.expression:type_name -> mojo.db.sql.Expression
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_mojo_db_sql_column_constraint_proto_init() }
func file_mojo_db_sql_column_constraint_proto_init() {
	if File_mojo_db_sql_column_constraint_proto != nil {
		return
	}
	file_mojo_db_sql_check_clause_proto_init()
	file_mojo_db_sql_clause_proto_init()
	file_mojo_db_sql_collate_clause_proto_init()
	file_mojo_db_sql_conflict_clause_proto_init()
	file_mojo_db_sql_foreign_key_clause_proto_init()
	file_mojo_db_sql_order_proto_init()
	file_mojo_db_sql_sql_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mojo_db_sql_column_constraint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_column_constraint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnConstraint_PrimaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_column_constraint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnConstraint_NotNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_column_constraint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnConstraint_Unique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_db_sql_column_constraint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnConstraint_Default); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mojo_db_sql_column_constraint_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ColumnConstraint_PrimaryKey_)(nil),
		(*ColumnConstraint_NotNull_)(nil),
		(*ColumnConstraint_Unique_)(nil),
		(*ColumnConstraint_CheckClause)(nil),
		(*ColumnConstraint_Default_)(nil),
		(*ColumnConstraint_CollateClause)(nil),
		(*ColumnConstraint_ForeignKeyClause)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mojo_db_sql_column_constraint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mojo_db_sql_column_constraint_proto_goTypes,
		DependencyIndexes: file_mojo_db_sql_column_constraint_proto_depIdxs,
		MessageInfos:      file_mojo_db_sql_column_constraint_proto_msgTypes,
	}.Build()
	File_mojo_db_sql_column_constraint_proto = out.File
	file_mojo_db_sql_column_constraint_proto_rawDesc = nil
	file_mojo_db_sql_column_constraint_proto_goTypes = nil
	file_mojo_db_sql_column_constraint_proto_depIdxs = nil
}
