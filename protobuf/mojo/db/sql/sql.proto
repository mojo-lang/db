// Code generated by mojo. DO NOT EDIT.

syntax = "proto3";

package mojo.db.sql;

import "mojo/db/sql/between_expr.proto";
import "mojo/db/sql/bind_parameter_expr.proto";
import "mojo/db/sql/blob_literal_expr.proto";
import "mojo/db/sql/case_expr.proto";
import "mojo/db/sql/clause.proto";
import "mojo/db/sql/column_ref_expr.proto";
import "mojo/db/sql/data_manipulation_stmt.proto";
import "mojo/db/sql/data_set_quantifier.proto";
import "mojo/db/sql/function_call_expr.proto";
import "mojo/db/sql/identifier_expr.proto";
import "mojo/db/sql/in_expr.proto";
import "mojo/db/sql/order.proto";
import "mojo/lang/lang.proto";

option go_package = "github.com/mojo-lang/db/go/pkg/mojo/db/sql;sql";
option java_multiple_files = true;
option java_outer_classname = "SqlProto";
option java_package = "org.mojo-lang.mojo.db.sql";

message BinaryExpr {
    
    enum Operator {
        OPERATOR_UNSPECIFIED=0;
        OPERATOR_PLUS=1;
        OPERATOR_MINUS=2;
        OPERATOR_MUL=3;
        OPERATOR_DIV=4;
        OPERATOR_MOD=5;
        OPERATOR_LT=10;
        OPERATOR_GT=11;
        OPERATOR_LTE=12;
        OPERATOR_GTE=13;
        OPERATOR_EQUAL=14;
        OPERATOR_NOT_EQUAL=15;
        OPERATOR_ASSIGN=18;
        OPERATOR_AND=20;
        OPERATOR_OR=21;
        OPERATOR_BIT_AND=25;
        OPERATOR_BIT_OR=26;
        OPERATOR_BIT_XOR=27;
        OPERATOR_IS=30;
        OPERATOR_IS_NOT=31;
        OPERATOR_IN=40;
        OPERATOR_LIKE=41;
        OPERATOR_MATCH=42;
        OPERATOR_REGEXP=43;
        OPERATOR_GLOB=50;
    }
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int32 kind = 4;
    bool implicit = 5;
    Operator operator = 10;
    string operator_symbol = 11;
    int32 operator_precedence = 12;
    Expression left_argument = 15;
    Expression right_argument = 16;
}

message Column {
    oneof column {
        AllColumn all_column_val = 1;
        DerivedColumn derived_column_val = 2;
    }
}

message AllColumn {
    string table_name = 1;
}

message DerivedColumn {
    Expression expr = 1;
    string as = 2;
}

message CompoundSelect {
    
    enum Operator {
        OPERATOR_UNSPECIFIED=0;
        OPERATOR_UNION=1;
        OPERATOR_INTERSECT=2;
        OPERATOR_EXCEPT=3;
    }
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    WithClause with = 10;
    oneof select {
        SelectClause select_clause = 11;
        CompoundSelect compound_select = 12;
    }
    ValuesClause values = 13;
    FromClause from = 14;
    WhereClause where = 15;
    GroupByClause group_by = 16;
    HavingClause having = 17;
    OrderByClause order_by = 20;
    LimitClause limit = 21;
    Operator operator = 30;
    CompoundSelect left = 31;
    CompoundSelect right = 32;
}

message Expression {
    oneof expression {
        mojo.lang.NullLiteralExpr null_literal_expr = 1;
        mojo.lang.BoolLiteralExpr bool_literal_expr = 2;
        mojo.lang.IntegerLiteralExpr integer_literal_expr = 3;
        mojo.lang.FloatLiteralExpr float_literal_expr = 4;
        mojo.lang.StringLiteralExpr string_literal_expr = 5;
        BlobLiteralExpr blob_literal_expr = 6;
        IdentifierExpr identifier_expr = 7;
        BindParameterExpr bind_parameter_expr = 10;
        ColumnRefExpr column_ref_expr = 11;
        PrefixUnaryExpr prefix_unary_expr = 15;
        PostfixUnaryExpr postfix_unary_expr = 16;
        BinaryExpr binary_expr = 17;
        BetweenExpr between_expr = 18;
        InExpr in_expr = 19;
        CaseExpr case_expr = 20;
        FunctionCallExpr function_call_expr = 21;
        SubqueryExpr subquery_expr = 30;
    }
}

message FromClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    repeated Table tables = 10;
    JoinClause join = 11;
}

message GroupByClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    repeated Expression expressions = 10;
}

message HavingClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    Expression expression = 10;
}

message JoinClause {
    
    enum Operator {
        OPERATOR_UNSPECIFIED=0;
    }
    
    message Constraint {
        int64 v = 1;
    }
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    Table table = 10;
    Operator operator = 15;
    JoinClause left = 16;
    JoinClause right = 17;
    Constraint constraint = 18;
}

message LimitClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    Expression rows = 10;
    oneof offset {
        Expression expression = 11;
        OffsetClause offset_clause = 12;
    }
}

message OffsetClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    Expression value = 10;
}

message OrderByClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    repeated Ordering orderings = 10;
}

message Ordering {
    Expression expression = 1;
    string collation = 2;
    Order order = 3;
    bool nulls_first = 5;
    bool nulls_last = 6;
}

message PostfixUnaryExpr {
    
    enum Operator {
        OPERATOR_UNSPECIFIED=0;
        OPERATOR_IS_NULL=1;
        OPERATOR_NOT_NULL=2;
        OPERATOR_EXTENDED=99;
    }
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int32 kind = 4;
    bool implicit = 5;
    string operator_symbol = 10;
    Expression argument = 11;
    Operator operator = 15;
}

message PrefixUnaryExpr {
    
    enum Operator {
        OPERATOR_UNSPECIFIED=0;
        OPERATOR_MINUS=1;
        OPERATOR_PLUS=2;
        OPERATOR_TILDE=3;
        OPERATOR_NOT=4;
        OPERATOR_BIT_NOT=5;
        OPERATOR_EXTENDED=99;
    }
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int32 kind = 4;
    bool implicit = 5;
    string operator_symbol = 10;
    Expression argument = 11;
    Operator operator = 15;
}

message SelectClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    DataSetQuantifier quantifier = 10;
    repeated Column columns = 12;
}

message SelectStmt {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    WithClause with = 10;
    oneof select {
        SelectClause select_clause = 11;
        CompoundSelect compound_select = 12;
    }
    ValuesClause values = 13;
    FromClause from = 14;
    WhereClause where = 15;
    GroupByClause group_by = 16;
    HavingClause having = 17;
    OrderByClause order_by = 20;
    LimitClause limit = 21;
}

message SubqueryExpr {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int32 kind = 4;
    bool implicit = 5;
    bool exists = 10;
    SelectStmt query = 11;
}

message Table {
    oneof table {
        TableName table_name_val = 1;
        TableFunctionName table_function_name_val = 2;
        TableQuery table_query_val = 3;
    }
}

message TableName {
    string schema_name = 10;
    string name = 13;
    string alias = 15;
}

message TableFunctionName {
    string schema_name = 10;
    string name = 13;
    repeated Expression arguments = 14;
    string alias = 15;
}

message TableQuery {
    SelectStmt query = 10;
    string alias = 15;
}

message UnaryExpr {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int32 kind = 4;
    bool implicit = 5;
    string operator_symbol = 10;
    Expression argument = 11;
}

message ValuesClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    repeated Expression values = 10;
}

message WhereClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    Expression expression = 10;
}

message TemporaryTable {
    string name = 1;
    repeated string columns = 2;
    SelectStmt subquery = 3;
}

message WithClause {
    mojo.lang.Position start_position = 1;
    mojo.lang.Position end_position = 2;
    int64 kind = 4;
    bool implicit = 5;
    repeated TemporaryTable tables = 10;
    bool recursive = 15;
}
